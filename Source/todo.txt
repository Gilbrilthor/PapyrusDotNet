==================================
    Papyrus2Clr (1/1 completed)
==================================
TODO: (1/1 completed)
    * [Completed] Properties cannot be currently be accessed
        
==================================
    Clr2Papyrus (13/32 completed)
==================================
TODO:
  (1) Instructions: (4/15 completed)
    * [Completed] PropGet - Use with external classes
    * [Completed] PropSet - Use with external classes
        (Accessing a property outside the "local" class)
        (!! Papyrus2Clr needs to be fixed first !!)
    * StructCreate - new StructName() ?
    * [Completed] StructGet - Struct Variable/Property Get		
    * [Completed] StructSet - Struct Variable/Property Set		
    * [Completed] Is - It has the same usage as the 'is' keyword in c#
    
    -\\ Proposed API for accessing the Array Functions using Extension methods \\-
    ------------------------------------------------------------------------------
    [TP2 - TP4]
	* ArrayFindElement - int index ItemArray[].Find(elm) ?
    * ArrayRfindelement - int index ItemArray[].Find(elm) ?
    * ArrayFindStruct - int index StructArray[].Find(...) ?
    * ArrayRfindStruct - int index StructArray[].Find(...) ?
    * ArrayAddElements - void ItemArray[].AddRange(item1, item2, item3, itemN...) ?
    * ArrayInsertElement - int index ItemArray[].Insert(index, elm) ?
    * ArrayRemoveElements - void ItemArray[].RemoveRange(0..n) ?
    * ArrayRemoveLastElement - void ItemArray[].RemoveLast()	?
    * ArrayClearElements - void ItemArray[].Clear()			?
  
  (2) [TP4] States:  (0/3 completed)
    * State Definition
        - How to create a state
        - How to change a state
        - How to enforce state method one-to-one existence with owning type
  
  (3) [TP1] Enums: (1/1)
		(All references to an enum type are replaced with a 'Int' type instead)
	* [Completed] Replace Enum Types with Integers

  (4) [TP2] Delegates: (3/7 completed)
        (Note to self: Look at the old code where I've already solved this :))
    * [Completed] Create delegates
    * [Completed] Simple Delegates without parameters and no use of outside variables.
	* [Completed] Simple Delegates with parameters and no use of outside variables.
	* [Completed] Simple Delegates without parameters and uses outside variables.
	* [Completed] Simple Delegates with parameters and uses outside variables.
	* [Completed] Nested Delegates without parameters
	* [Completed] Nested Delegates with parameters

  (5) [TP3] Generics: (0/3 completed)
        (Note to self: Look at the old code where I've already solved this :))
    * Find all usage of Generic Types
    * Create a new Type for each used generic type replacing the Generic Parameter Type with the used Type.
	* Update references to use the newly generated types

  (6) Debug: (2/2 completed)
	* [Completed] Finish the debug table
	* [Completed] Add debug line numbers based on the c# source code
  
  (7) Documentation: (0/1 completed)
	* Add Documentation using XML Documentation

==================================
    PapyrusAssembly (0/1 completed)
==================================
TODO: (0/1 completed)
    * Create an assembly parser
        (Input text/assembly code and output appropriate typed object)
        (This can be used for easier inserting/injecting papyrus assembly code)